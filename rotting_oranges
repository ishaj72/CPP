class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        vector<vector<int>> visited = grid;
        int count = 0;
        int rows = grid.size();
        int columns = grid[0].size();
        queue<pair<int,int>> q;
        for(int i = 0 ; i< rows ; i++){
            for(int j = 0 ; j< columns ; j++){
                if(visited[i][j]==2){
                    q.push({i,j});
                }
                if(visited[i][j]==1){
                    count++;
                }
            }
        }
        if(count == 0){
            return 0;
        }
        if(q.empty()){
            return -1;
        }
        int minutes = -1;
        vector<pair<int, int>> directions = {{1, 0},{-1, 0},{0, -1},{0, 1}};
        while(!q.empty()){
        int x = q.size();
        while(x--){
            auto[a,b]=q.front();
            q.pop();
            for (auto [dx, dy] : directions) {
                int i = a + dx;
                int j = b + dy;
                if (i >= 0 && i < rows && j >= 0 && j < columns && visited[i][j] == 1) {
                    visited[i][j] = 2;
                    count--;
                    q.push({i, j});
                }
            }
        }
            minutes++;
        }
        if (count == 0)
            return minutes;
        return -1;
    }
};